# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type RefreshToken {
  token_id: ID!
  user: User!
  token: String!
  expires_at: DateTime!
  created_at: DateTime!
  is_revoked: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Like {
  like_id: ID!
  user: User!
  post: Post!
  created_at: DateTime!
}

type Comment {
  comment_id: ID!
  user: User
  post: Post!
  content: String!
  created_at: DateTime!
}

type Post {
  post_id: ID!
  user: User!
  content: String!
  media_url: [String!]
  created_at: DateTime!
  updated_at: DateTime
  visibility: String!
  likes: [Like!]
  comments: [Comment!]
}

type Notification {
  notification_id: ID!
  user: User!
  type: String!
  related_id: String!
  is_read: Boolean!
  created_at: DateTime!
}

type Message {
  message_id: ID!
  content: String
  created_at: DateTime!
  room: ChatRoom!
  sender: User!
}

type ChatRoom {
  room_id: ID!
  is_group: Boolean!
  name: String
  created_at: DateTime!
  roomUsers: [ChatRoomUser!]
  messages: [Message!]
}

type ChatRoomUser {
  room_user_id: ID!
  user: User
  room: ChatRoom
}

type User {
  id: ID!
  email: String!
  full_name: String
  avatar_url: String
  bio: String
  privacy: String!
  created_at: DateTime!
  is_verified: Boolean!
  otp_code: String
  otp_expires_at: DateTime
  authProviders: [AuthProvider!]
  refreshTokens: [RefreshToken!]
  posts: [Post!]
  likes: [Like!]
  comments: [Comment!]
  notifications: [Notification!]
  chatRoomUsers: [ChatRoomUser!]
  messages: [Message!]
}

type AuthProvider {
  auth_id: ID!
  user: User!
  provider: String!
  provider_id: String!
  created_at: DateTime!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  total: Int!
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserResponse {
  message: String!
  status: Int!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserType {
  id: ID!
  friendId: String!
  email: String!
  friend_status: String
  friendshipId: String
  password: String
  full_name: String
  avatar_url: String
  bio: String
  privacy: Privacy!
  created_at: DateTime!
  is_verified: Boolean!
  otp_code: String
  otp_expires_at: DateTime
}

enum Privacy {
  PUBLIC
  PRIVATE
  FRIENDS
}

type Friendship {
  friendshipId: ID!
  user: UserType!
  friend: UserType!
  status: String!
  createdAt: String!
}

type PaginatedUserResponse {
  items: [UserType!]
  total: Int!
}

type PaginatedFriendshipResponse {
  items: [Friendship!]
  total: Int!
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

type PaginatedResponse {
  edges: [NotificationEdge!]!
  pageInfo: PageInfo!
}

type NotificationResponse {
  message: String!
  status: Int!
  data: PaginatedResponse!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

type MessageResponse {
  message: String!
  status: Int!
  data: Message
}

type MessagesListResponse {
  message: String!
  status: Int!
  edges: [MessageEdge!]!
  pageInfo: PageInfo!
}

type ChatRoomEdge {
  node: ChatRoom!
  cursor: String!
}

type PaginatedChatRoomsResponse {
  edges: [ChatRoomEdge!]!
  pageInfo: PageInfo!
}

type PostCustom {
  post_id: ID!
  user: User!
  content: String!
  media_url: [String!]
  created_at: DateTime!
  updated_at: DateTime
  visibility: String!
  likes: [Like!]
  comments: [Comment!]
  isLike: Boolean!
}

type PostEdge {
  node: PostCustom!
  cursor: String!
  likeCount: Int!
  commentCount: Int!
}

type PostResponse {
  message: String!
  status: Int!
  data: Post!
  pagination: PageInfo
  likeCount: Int!
  commentCount: Int!
}

type PostsListResponse {
  message: String!
  status: Int!
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

type Query {
  hello: String!
  searchUsers(query: String!, limit: Int! = 10, cursor: String): UserResponse!
  getFriends(limit: Int, offset: Int, currentUserId: String!): PaginatedUserResponse!
  getFriendRequests(limit: Int, offset: Int, currentUserId: String!): PaginatedFriendshipResponse!
  getNotifications(limit: Int, cursor: String): NotificationResponse!
  getMessages(room_id: String!, limit: Int! = 20, cursor: String): MessagesListResponse!
  getChatRooms(limit: Int! = 10, cursor: String): PaginatedChatRoomsResponse!
  getPost(postId: String!): PostResponse!
  getPosts(limit: Int!, cursor: String): PostsListResponse!
  searchPosts(query: String!, limit: Int!, cursor: String): PostsListResponse!
}

type Mutation {
  sendFriendRequest(friendId: String!, currentUserId: String!): Friendship!
  acceptFriendRequest(friendshipId: String!, currentUserId: String!): Friendship!
  rejectFriendRequest(friendshipId: String!, currentUserId: String!): Boolean!
  removeFriend(friendshipId: String!, currentUserId: String!): Boolean!
  markNotificationAsRead(notificationId: String!): Notification!
  sendMessage(input: SendMessageInput!): MessageResponse!
  likePost(postId: String!): String!
  unlikePost(postId: String!): String!
  createComment(postId: String!, content: String!): Comment!
  deleteComment(commentId: String!): String!
}

input SendMessageInput {
  room_id: ID!
  content: String!
}