# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

<<<<<<< HEAD
type UserType {
  id: ID!
  email: String!
  password: String
  full_name: String
  avatar_url: String
  bio: String
  privacy: Privacy!
  created_at: DateTime!
  is_verified: Boolean!
  otp_code: String
  otp_expires_at: DateTime
}

enum Privacy {
  PUBLIC
  PRIVATE
  FRIENDS
=======
type RefreshToken {
  token_id: ID!
  user: User!
  token: String!
  expires_at: DateTime!
  created_at: DateTime!
  is_revoked: Boolean!
>>>>>>> develop
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

<<<<<<< HEAD
type Friendship {
  friendshipId: ID!
  user: UserType!
  friend: UserType!
  status: String!
  createdAt: String!
}

type PaginatedUserResponse {
  items: [UserType!]
  total: Int!
}

type PaginatedFriendshipResponse {
  items: [Friendship!]
  total: Int!
=======
type Like {
  like_id: ID!
  user: User!
  post: Post!
  created_at: DateTime!
}

type Comment {
  comment_id: ID!
  user: User
  post: Post!
  content: String!
  created_at: DateTime!
}

type Post {
  post_id: ID!
  user: User!
  content: String!
  media_url: [String!]
  created_at: DateTime!
  updated_at: DateTime
  visibility: String!
  likes: [Like!]
  comments: [Comment!]
}

type User {
  id: ID!
  email: String!
  full_name: String
  avatar_url: String
  bio: String
  privacy: String!
  created_at: DateTime!
  is_verified: Boolean!
  otp_code: String
  otp_expires_at: DateTime
  authProviders: [AuthProvider!]
  refreshTokens: [RefreshToken!]
  posts: [Post!]
  likes: [Like!]
  comments: [Comment!]
}

type AuthProvider {
  auth_id: ID!
  user: User!
  provider: String!
  provider_id: String!
  created_at: DateTime!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  total: Int!
}

type PostEdge {
  node: Post!
  cursor: String!
  likeCount: Int!
  commentCount: Int!
}

type PostResponse {
  message: String!
  status: Int!
  data: Post!
  pagination: PageInfo
  likeCount: Int!
  commentCount: Int!
}

type PostsListResponse {
  message: String!
  status: Int!
  edges: [PostEdge!]!
  pageInfo: PageInfo!
>>>>>>> develop
}

type Query {
  hello: String!
<<<<<<< HEAD
  getFriends(limit: Int, offset: Int, currentUserId: String!): PaginatedUserResponse!
  getFriendRequests(limit: Int, offset: Int, currentUserId: String!): PaginatedFriendshipResponse!
}

type Mutation {
  sendFriendRequest(friendId: String!, currentUserId: String!): Friendship!
=======
  getPost(postId: String!): PostResponse!
  getPosts(limit: Int!, cursor: String): PostsListResponse!
}

type Mutation {
  likePost(postId: String!): String!
  unlikePost(postId: String!): String!
  createComment(postId: String!, content: String!): Comment!
  deleteComment(commentId: String!): String!
>>>>>>> develop
}